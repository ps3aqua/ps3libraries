diff -urp old/library/entropy_poll.c new/library/entropy_poll.c
--- old/library/entropy_poll.c	2021-12-15 14:48:01.000000000 +0100
+++ new/library/entropy_poll.c	2022-02-11 14:01:44.000000000 +0100
@@ -43,7 +43,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__PSL1GHT__)
 #error "Platform entropy sources only work on Unix and Windows, see MBEDTLS_NO_PLATFORM_ENTROPY in mbedtls_config.h"
 #endif
 
@@ -158,6 +158,10 @@ static int sysctl_arnd_wrapper( unsigned
 
 #include <stdio.h>
 
+#if defined(__PSL1GHT__)
+#include <lv2/system.h>
+#endif
+
 int mbedtls_platform_entropy_poll( void *data,
                            unsigned char *output, size_t len, size_t *olen )
 {
@@ -166,6 +170,16 @@ int mbedtls_platform_entropy_poll( void 
     int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     ((void) data);
 
+#if defined(__PSL1GHT__)
+    if (sysGetRandomNumber( output, len ) == 0)
+    {
+        *olen = len;
+        return( 0 );
+    }
+    else
+        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
+#endif
+
 #if defined(HAVE_GETRANDOM)
     ret = getrandom_wrapper( output, len, 0 );
     if( ret >= 0 )
diff -urp old/library/net_sockets.c new/library/net_sockets.c
--- old/library/net_sockets.c	2021-12-15 14:48:01.000000000 +0100
+++ new/library/net_sockets.c	2022-02-11 15:24:18.000000000 +0100
@@ -33,7 +33,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__PSL1GHT__)
 #error "This module only works on Unix and Windows, see MBEDTLS_NET_C in mbedtls_config.h"
 #endif
 
@@ -92,6 +92,7 @@ static int wsa_init_done = 0;
 #include <fcntl.h>
 #include <netdb.h>
 #include <errno.h>
+#include <net/select.h>
 
 #define IS_EINTR( ret ) ( ( ret ) == EINTR )
 
@@ -153,7 +154,7 @@ static int check_fd( int fd, int for_sel
      * that are strictly less than FD_SETSIZE. This is a limitation of the
      * fd_set type. Error out early, because attempting to call FD_SET on a
      * large file descriptor is a buffer overflow on typical platforms. */
-    if( for_select && fd >= FD_SETSIZE )
+    if( for_select && SOCKET_FD(fd) >= FD_SETSIZE )
         return( MBEDTLS_ERR_NET_POLL_FAILED );
 #endif
 
@@ -174,45 +175,33 @@ void mbedtls_net_init( mbedtls_net_conte
 int mbedtls_net_connect( mbedtls_net_context *ctx, const char *host,
                          const char *port, int proto )
 {
-    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
-    struct addrinfo hints, *addr_list, *cur;
+    struct sockaddr_in server_addr;
+    struct hostent *server_host;
+    int ret;
 
     if( ( ret = net_prepare() ) != 0 )
         return( ret );
 
-    /* Do name resolution with both IPv6 and IPv4 */
-    memset( &hints, 0, sizeof( hints ) );
-    hints.ai_family = AF_UNSPEC;
-    hints.ai_socktype = proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM;
-    hints.ai_protocol = proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP;
-
-    if( getaddrinfo( host, port, &hints, &addr_list ) != 0 )
+    if( ( server_host = gethostbyname( host ) ) == NULL )
         return( MBEDTLS_ERR_NET_UNKNOWN_HOST );
 
-    /* Try the sockaddrs until a connection succeeds */
-    ret = MBEDTLS_ERR_NET_UNKNOWN_HOST;
-    for( cur = addr_list; cur != NULL; cur = cur->ai_next )
-    {
-        ctx->fd = (int) socket( cur->ai_family, cur->ai_socktype,
-                            cur->ai_protocol );
-        if( ctx->fd < 0 )
-        {
-            ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
-            continue;
-        }
-
-        if( connect( ctx->fd, cur->ai_addr, MSVC_INT_CAST cur->ai_addrlen ) == 0 )
-        {
-            ret = 0;
-            break;
-        }
+    if( ( ctx->fd = socket( AF_INET, SOCK_STREAM, IPPROTO_IP ) ) < 0 )
+        return( MBEDTLS_ERR_NET_SOCKET_FAILED );
+
+    memcpy( (void *) &server_addr.sin_addr,
+            (void *) server_host->h_addr,
+                     server_host->h_length );
 
+    server_addr.sin_family = AF_INET;
+    server_addr.sin_port   = htons( atoi( port ) );
+
+    if( connect( ctx->fd, (struct sockaddr *) &server_addr,
+                 sizeof( server_addr ) ) < 0 )
+    {
         close( ctx->fd );
-        ret = MBEDTLS_ERR_NET_CONNECT_FAILED;
+        return( MBEDTLS_ERR_NET_CONNECT_FAILED );
     }
 
-    freeaddrinfo( addr_list );
-
     return( ret );
 }
 
@@ -221,68 +210,56 @@ int mbedtls_net_connect( mbedtls_net_con
  */
 int mbedtls_net_bind( mbedtls_net_context *ctx, const char *bind_ip, const char *port, int proto )
 {
-    int n, ret;
-    struct addrinfo hints, *addr_list, *cur;
+    int n, c[4], ret;
+    struct sockaddr_in server_addr;
 
     if( ( ret = net_prepare() ) != 0 )
         return( ret );
 
-    /* Bind to IPv6 and/or IPv4, but only in the desired protocol */
-    memset( &hints, 0, sizeof( hints ) );
-    hints.ai_family = AF_UNSPEC;
-    hints.ai_socktype = proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM;
-    hints.ai_protocol = proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP;
-    if( bind_ip == NULL )
-        hints.ai_flags = AI_PASSIVE;
+    if( ( ctx->fd = socket( AF_INET, SOCK_STREAM, IPPROTO_IP ) ) < 0 )
+        return( MBEDTLS_ERR_NET_SOCKET_FAILED );
 
-    if( getaddrinfo( bind_ip, port, &hints, &addr_list ) != 0 )
-        return( MBEDTLS_ERR_NET_UNKNOWN_HOST );
+    n = 1;
+    if (setsockopt( ctx->fd, SOL_SOCKET, SO_REUSEADDR,
+                (const char *) &n, sizeof( n ) ) != 0 )
+    {
+        close( ctx->fd );
+        return( MBEDTLS_ERR_NET_SOCKET_FAILED );
+    }
+
+    server_addr.sin_addr.s_addr = htonl( INADDR_ANY );
+    server_addr.sin_family      = AF_INET;
+    server_addr.sin_port        = htons( atoi( port ) );
+
+    if( bind_ip != NULL )
+    {
+        memset( c, 0, sizeof( c ) );
+        sscanf( bind_ip, "%d.%d.%d.%d", &c[0], &c[1], &c[2], &c[3] );
+
+        for( n = 0; n < 4; n++ )
+            if( c[n] < 0 || c[n] > 255 )
+                break;
 
-    /* Try the sockaddrs until a binding succeeds */
-    ret = MBEDTLS_ERR_NET_UNKNOWN_HOST;
-    for( cur = addr_list; cur != NULL; cur = cur->ai_next )
-    {
-        ctx->fd = (int) socket( cur->ai_family, cur->ai_socktype,
-                            cur->ai_protocol );
-        if( ctx->fd < 0 )
-        {
-            ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
-            continue;
-        }
-
-        n = 1;
-        if( setsockopt( ctx->fd, SOL_SOCKET, SO_REUSEADDR,
-                        (const char *) &n, sizeof( n ) ) != 0 )
-        {
-            close( ctx->fd );
-            ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
-            continue;
-        }
-
-        if( bind( ctx->fd, cur->ai_addr, MSVC_INT_CAST cur->ai_addrlen ) != 0 )
-        {
-            close( ctx->fd );
-            ret = MBEDTLS_ERR_NET_BIND_FAILED;
-            continue;
-        }
-
-        /* Listen only makes sense for TCP */
-        if( proto == MBEDTLS_NET_PROTO_TCP )
-        {
-            if( listen( ctx->fd, MBEDTLS_NET_LISTEN_BACKLOG ) != 0 )
-            {
-                close( ctx->fd );
-                ret = MBEDTLS_ERR_NET_LISTEN_FAILED;
-                continue;
-            }
-        }
-
-        /* Bind was successful */
-        ret = 0;
-        break;
+        if( n == 4 )
+            server_addr.sin_addr.s_addr = htonl(
+                ( (uint32_t) c[0] << 24 ) |
+                ( (uint32_t) c[1] << 16 ) |
+                ( (uint32_t) c[2] <<  8 ) |
+                ( (uint32_t) c[3]       ) );
     }
 
-    freeaddrinfo( addr_list );
+    if( bind( ctx->fd, (struct sockaddr *) &server_addr,
+              sizeof( server_addr ) ) < 0 )
+    {
+        close( ctx->fd );
+        return( MBEDTLS_ERR_NET_BIND_FAILED );
+    }
+
+    if( listen( ctx->fd, MBEDTLS_NET_LISTEN_BACKLOG ) != 0 )
+    {
+        close( ctx->fd );
+        return( MBEDTLS_ERR_NET_LISTEN_FAILED );
+    }
 
     return( ret );
 
@@ -343,7 +320,7 @@ int mbedtls_net_accept( mbedtls_net_cont
     int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
     int type;
 
-    struct sockaddr_storage client_addr;
+    struct sockaddr_in client_addr;
 
 #if defined(__socklen_t_defined) || defined(_SOCKLEN_T) ||  \
     defined(_SOCKLEN_T_DECLARED) || defined(__DEFINED_socklen_t) || \
@@ -358,7 +335,7 @@ int mbedtls_net_accept( mbedtls_net_cont
     /* Is this a TCP or UDP socket? */
     if( getsockopt( bind_ctx->fd, SOL_SOCKET, SO_TYPE,
                     (void *) &type, &type_len ) != 0 ||
-        ( type != SOCK_STREAM && type != SOCK_DGRAM ) )
+        ( type != SOCK_STREAM ) )
     {
         return( MBEDTLS_ERR_NET_ACCEPT_FAILED );
     }
@@ -369,23 +346,6 @@ int mbedtls_net_accept( mbedtls_net_cont
         ret = client_ctx->fd = (int) accept( bind_ctx->fd,
                                              (struct sockaddr *) &client_addr, &n );
     }
-    else
-    {
-        /* UDP: wait for a message, but keep it in the queue */
-        char buf[1] = { 0 };
-
-        ret = (int) recvfrom( bind_ctx->fd, buf, sizeof( buf ), MSG_PEEK,
-                        (struct sockaddr *) &client_addr, &n );
-
-#if defined(_WIN32)
-        if( ret == SOCKET_ERROR &&
-            WSAGetLastError() == WSAEMSGSIZE )
-        {
-            /* We know buf is too small, thanks, just peeking here */
-            ret = 0;
-        }
-#endif
-    }
 
     if( ret < 0 )
     {
@@ -395,40 +355,8 @@ int mbedtls_net_accept( mbedtls_net_cont
         return( MBEDTLS_ERR_NET_ACCEPT_FAILED );
     }
 
-    /* UDP: hijack the listening socket to communicate with the client,
-     * then bind a new socket to accept new connections */
-    if( type != SOCK_STREAM )
-    {
-        struct sockaddr_storage local_addr;
-        int one = 1;
-
-        if( connect( bind_ctx->fd, (struct sockaddr *) &client_addr, n ) != 0 )
-            return( MBEDTLS_ERR_NET_ACCEPT_FAILED );
-
-        client_ctx->fd = bind_ctx->fd;
-        bind_ctx->fd   = -1; /* In case we exit early */
-
-        n = sizeof( struct sockaddr_storage );
-        if( getsockname( client_ctx->fd,
-                         (struct sockaddr *) &local_addr, &n ) != 0 ||
-            ( bind_ctx->fd = (int) socket( local_addr.ss_family,
-                                           SOCK_DGRAM, IPPROTO_UDP ) ) < 0 ||
-            setsockopt( bind_ctx->fd, SOL_SOCKET, SO_REUSEADDR,
-                        (const char *) &one, sizeof( one ) ) != 0 )
-        {
-            return( MBEDTLS_ERR_NET_SOCKET_FAILED );
-        }
-
-        if( bind( bind_ctx->fd, (struct sockaddr *) &local_addr, n ) != 0 )
-        {
-            return( MBEDTLS_ERR_NET_BIND_FAILED );
-        }
-    }
-
     if( client_ip != NULL )
     {
-        if( client_addr.ss_family == AF_INET )
-        {
             struct sockaddr_in *addr4 = (struct sockaddr_in *) &client_addr;
             *ip_len = sizeof( addr4->sin_addr.s_addr );
 
@@ -436,17 +364,6 @@ int mbedtls_net_accept( mbedtls_net_cont
                 return( MBEDTLS_ERR_NET_BUFFER_TOO_SMALL );
 
             memcpy( client_ip, &addr4->sin_addr.s_addr, *ip_len );
-        }
-        else
-        {
-            struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *) &client_addr;
-            *ip_len = sizeof( addr6->sin6_addr.s6_addr );
-
-            if( buf_size < *ip_len )
-                return( MBEDTLS_ERR_NET_BUFFER_TOO_SMALL );
-
-            memcpy( client_ip, &addr6->sin6_addr.s6_addr, *ip_len);
-        }
     }
 
     return( 0 );
@@ -461,6 +378,9 @@ int mbedtls_net_set_block( mbedtls_net_c
     !defined(EFI32)
     u_long n = 0;
     return( ioctlsocket( ctx->fd, FIONBIO, &n ) );
+#elif defined(__lv2ppu__)
+    int dontblock = 0;
+    return setsockopt(ctx->fd, SOL_SOCKET, SO_NBIO, &dontblock, sizeof(dontblock));
 #else
     return( fcntl( ctx->fd, F_SETFL, fcntl( ctx->fd, F_GETFL ) & ~O_NONBLOCK ) );
 #endif
@@ -472,6 +392,9 @@ int mbedtls_net_set_nonblock( mbedtls_ne
     !defined(EFI32)
     u_long n = 1;
     return( ioctlsocket( ctx->fd, FIONBIO, &n ) );
+#elif defined(__lv2ppu__)
+    int dontblock = 1;
+    return setsockopt(ctx->fd, SOL_SOCKET, SO_NBIO, &dontblock, sizeof(dontblock));
 #else
     return( fcntl( ctx->fd, F_SETFL, fcntl( ctx->fd, F_GETFL ) | O_NONBLOCK ) );
 #endif
@@ -509,14 +432,14 @@ int mbedtls_net_poll( mbedtls_net_contex
     if( rw & MBEDTLS_NET_POLL_READ )
     {
         rw &= ~MBEDTLS_NET_POLL_READ;
-        FD_SET( fd, &read_fds );
+        FD_SET( SOCKET_FD(fd), &read_fds );
     }
 
     FD_ZERO( &write_fds );
     if( rw & MBEDTLS_NET_POLL_WRITE )
     {
         rw &= ~MBEDTLS_NET_POLL_WRITE;
-        FD_SET( fd, &write_fds );
+        FD_SET( SOCKET_FD(fd), &write_fds );
     }
 
     if( rw != 0 )
@@ -536,9 +459,9 @@ int mbedtls_net_poll( mbedtls_net_contex
         return( MBEDTLS_ERR_NET_POLL_FAILED );
 
     ret = 0;
-    if( FD_ISSET( fd, &read_fds ) )
+    if( FD_ISSET( SOCKET_FD(fd), &read_fds ) )
         ret |= MBEDTLS_NET_POLL_READ;
-    if( FD_ISSET( fd, &write_fds ) )
+    if( FD_ISSET( SOCKET_FD(fd), &write_fds ) )
         ret |= MBEDTLS_NET_POLL_WRITE;
 
     return( ret );
@@ -617,7 +540,7 @@ int mbedtls_net_recv_timeout( void *ctx,
         return( ret );
 
     FD_ZERO( &read_fds );
-    FD_SET( fd, &read_fds );
+    FD_SET( SOCKET_FD(fd), &read_fds );
 
     tv.tv_sec  = timeout / 1000;
     tv.tv_usec = ( timeout % 1000 ) * 1000;
diff -urp old/library/timing.c new/library/timing.c
--- old/library/timing.c	2021-12-15 14:48:01.000000000 +0100
+++ new/library/timing.c	2022-02-11 14:01:44.000000000 +0100
@@ -27,7 +27,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__PSL1GHT__)
 #error "This module only works on Unix and Windows, see MBEDTLS_TIMING_C in mbedtls_config.h"
 #endif
 
